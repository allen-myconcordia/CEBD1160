version
4+3
setwd("~/Desktop/CEBD1160/Git/Project")
p1 = dbGetQuery( con,'select * from League' );
install.packages('RSQLite')
print(p1);
results = dbSendQuery(mydb, "SELECT * FROM League");
results = dbSendQuery(con, "SELECT * FROM League");
alltables;
alltables = dbListTables(con);
results = dbSendQuery(con, "SELECT * FROM League");
data = fetch(results);
data;
library("RSQLite");
# connect to the sqlite file
con = dbConnect(drv="SQLite", dbname="../../database.sqlite");
# Assign the results of a SQL query to an object
results = dbSendQuery(con, "SELECT * FROM League");
# Return results from a custom object to a data.frame
data = fetch(results);
# Print data frame to console
data;
library("RSQLite");
# connect to the sqlite file
con = dbConnect(drv="SQLite", dbname="../../database.sqlite");
# Assign the results of a SQL query to an object
results = dbSendQuery(con, "SELECT * FROM League");
# Return results from a custom object to a data.frame
data = fetch(results);
# Print data frame to console
data;
library("RSQLite");
# connect to the sqlite file
con = dbConnect(drv="SQLite", dbname="../../database.sqlite");
# get a list of all tables
alltables = dbListTables(con);
# get the populationtable as a data.frame
p1 = dbGetQuery( con,'select * from League' );
p1;
library("RSQLite");
# connect to the sqlite file
con = dbConnect(drv="SQLite", dbname="../../database.sqlite");
# get a list of all tables
alltables = dbListTables(con);
# get the populationtable as a data.frame
p1 = dbGetQuery( con,'select * from League' );
p1;
library("RSQLite");
# connect to the sqlite file
con = dbConnect(drv="SQLite", dbname="../../database.sqlite");
# get a list of all tables
alltables = dbListTables(con);
# get the populationtable as a data.frame
p1 = dbGetQuery( con,'select * from League' );
p1;
library("RSQLite");
# connect to the sqlite file
con = dbConnect(drv="SQLite", dbname="../../database.sqlite");
# get a list of all tables
alltables = dbListTables(con);
# get the populationtable as a data.frame
p1 = dbGetQuery( con,'select * from League' );
p1;
library("RSQLite");
# connect to the sqlite file
con = dbConnect(drv="SQLite", dbname="../../database.sqlite");
# get a list of all tables
alltables = dbListTables(con);
# get the populationtable as a data.frame
p1 = dbGetQuery( con,'select * from League' );
print('', p1)
library("RSQLite");
# connect to the sqlite file
con = dbConnect(drv="SQLite", dbname="../../database.sqlite");
# get a list of all tables
alltables = dbListTables(con);
# get the populationtable as a data.frame
p1 = dbGetQuery( con,'select * from League' );
print(p1);
install.packages(c("dbplyr", "RSQLite"))
install.packages(c("dbplyr", "RSQLite"))
library(dplyr)
library(RSQLite)
#Set up connection to the SQLite database
connection <- dbConnect(RSQLite::SQLite(), dbname = "../../database.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
#Print information about 'docs' table
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "docs"))
print("Column Name")
print(colnames(docs))
print(sprintf("Number of Rows: %d", nrow(docs)))
#Clean up connection to the database
dbDisconnect(connection)
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "Team_Attributes"))
print("Column Name")
library(RSQLite)
install.packages(c("dbplyr", "RSQLite",'dplyr'))
install.packages(c("dbplyr", "RSQLite", "dplyr"))
install.packages(c("dbplyr", "RSQLite", "dplyr"))
install.packages(c("dbplyr", "RSQLite", "dplyr"))
install.packages(c("dbplyr", "RSQLite", "dplyr"))
install.packages(c("dbplyr", "RSQLite", "dplyr"))
library(RSQLite)
library(dbplyr)
library(dplyr)
library(RSQLite)
#Set up connection to the SQLite database
connection <- dbConnect(RSQLite::SQLite(), dbname = "../../database.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
#Print information about 'docs' table
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "Team_Attributes"))
print("Column Name")
print(colnames(docs))
print(sprintf("Number of Rows: %d", nrow(docs)))
#Clean up connection to the database
dbDisconnect(connection)
library(dplyr)
library(dbplyr)
library(dplyr)
library(RSQLite)
#Set up connection to the SQLite database
connection <- dbConnect(RSQLite::SQLite(), dbname = "../../database.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
#Print information about 'docs' table
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "Team_Attributes"))
print("Column Name")
print(colnames(docs))
print(sprintf("Number of Rows: %d", nrow(docs)))
#Clean up connection to the database
dbDisconnect(connection)
load("~/Desktop/CEBD1160/Git/Project/.RData")
dbDisconnect(connection)
library(dbplyr)
library(dplyr)
library(RSQLite)
#Set up connection to the SQLite database
connection <- dbConnect(RSQLite::SQLite(), dbname = "../../database.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
#Print information about 'docs' table
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "Team_Attributes"))
print("Column Name")
print(colnames(docs))
print(sprintf("Number of Rows: %d", nrow(docs)))
#Clean up connection to the database
dbDisconnect(connection)
library(dbplyr)
library(dplyr)
library(RSQLite)
#Set up connection to the SQLite database
connection <- dbConnect(RSQLite::SQLite(), dbname = "../../database.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
#Print information about 'docs' table
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "Team_Attributes"))
print("Column Name")
print(colnames(docs))
print(sprintf("Number of Rows: %d", nrow(docs)))
print(docs)
#Clean up connection to the database
dbDisconnect(connection)
library(dbplyr)
library(dplyr)
library(RSQLite)
#Set up connection to the SQLite database
connection <- dbConnect(RSQLite::SQLite(), dbname = "../../database.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
#Print information about 'docs' table
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "Team_Attributes"))
print("Column Name")
print(colnames(docs))
print(sprintf("Number of Rows: %d", nrow(docs)))
#Clean up connection to the database
dbDisconnect(connection)
library(dbplyr)
library(dplyr)
library(RSQLite)
#Set up connection to the SQLite database
connection <- dbConnect(RSQLite::SQLite(), dbname = "../../database.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
#Print information about 'docs' table
docs <- dbGetQuery(connection, sprintf("SELECT t1.away_team_api_id, t1.home_team_api_id,(SELECT t2.team_long_name FROM Team t2 WHERE t1.home_team_api_id = t2.team_api_id),(SELECT t3.team_long_name FROM Team t3 WHERE t1.away_team_api_id = t3.team_api_id) FROM Match t1 WHERE t1.season = '2015/2016' AND t1.country_id= '1729';"))
print("Column Name")
print(colnames(docs))
print(sprintf("Number of Rows: %d", nrow(docs)))
#Clean up connection to the database
dbDisconnect(connection)
library(dbplyr)
library(dplyr)
library(RSQLite)
#Set up connection to the SQLite database
connection <- dbConnect(RSQLite::SQLite(), dbname = "../../database.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
#Print information about 'docs' table
docs <- dbGetQuery(connection, sprintf("SELECT t1.away_team_api_id, t1.home_team_api_id,(SELECT t2.team_long_name FROM Team t2 WHERE t1.home_team_api_id = t2.team_api_id),(SELECT t3.team_long_name FROM Team t3 WHERE t1.away_team_api_id = t3.team_api_id) FROM Match t1 WHERE t1.season = '2015/2016' AND t1.country_id= '1729';"))
print("Column Name")
print(colnames(docs))
print(sprintf("Number of Rows: %d", nrow(docs)))
print(docs);
#Clean up connection to the database
dbDisconnect(connection)
